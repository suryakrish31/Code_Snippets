import numpy as np

def randomLut(index):
    random_dict = {
        0x00 : 0xff48,
        0x01 : 0x0ec0,
        0x02 : 0x9a0d,
        0x03 : 0x70bc,
        0x04 : 0x8e2c,
        0x05 : 0x93ad,
        0x06 : 0xa7b7,
        0x07 : 0x46ce,
        0x08 : 0x5a97,
        0x09 : 0x7dcc,
        0x0a : 0x32a2,
        0x0b : 0xbf3e,
        0x0c : 0x0a10,
        0x0d : 0xf188,
        0x0e : 0x94cd,
        0x0f : 0xeab1,
        0x10 : 0xfe90,
        0x11 : 0x1d81,
        0x12 : 0x341a,
        0x13 : 0xe179,
        0x14 : 0x1c59,
        0x15 : 0x275b,
        0x16 : 0x4f6e,
        0x17 : 0x8d9c,
        0x18 : 0xb52e,
        0x19 : 0xfb98,
        0x1a : 0x6545,
        0x1b : 0x7e7c,
        0x1c : 0x1421,
        0x1d : 0xe311,
        0x1e : 0x299b,
        0x1f : 0xd563,
        0x20 : 0xfd20,
        0x21 : 0x3b02,
        0x22 : 0x6835,
        0x23 : 0xc2f2,
        0x24 : 0x38b2,
        0x25 : 0x4eb6,
        0x26 : 0x9edd,
        0x27 : 0x1b39,
        0x28 : 0x6a5d,
        0x29 : 0xf730,
        0x2a : 0xca8a,
        0x2b : 0xfcf8,
        0x2c : 0x2843,
        0x2d : 0xc622,
        0x2e : 0x5337,
        0x2f : 0xaac7,
        0x30 : 0xfa40,
        0x31 : 0x7604,
        0x32 : 0xd06b,
        0x33 : 0x85e4,
        0x34 : 0x7164,
        0x35 : 0x9d6d,
        0x36 : 0x3dba,
        0x37 : 0x3672,
        0x38 : 0xd4bb,
        0x39 : 0xee61,
        0x3a : 0x9515,
        0x3b : 0xf9f0,
        0x3c : 0x5087,
        0x3d : 0x8c44,
        0x3e : 0xa66f,
        0x3f : 0x558f,
        0x40 : 0xf480,
        0x41 : 0xec09,
        0x42 : 0xa0d7,
        0x43 : 0x0bc8,
        0x44 : 0xe2c9,
        0x45 : 0x3ada,
        0x46 : 0x7b74,
        0x47 : 0x6ce5,
        0x48 : 0xa977,
        0x49 : 0xdcc3,
        0x4a : 0x2a2b,
        0x4b : 0xf3e0,
        0x4c : 0xa10f,
        0x4d : 0x1889,
        0x4e : 0x4cde,
        0x4f : 0xab1f,
        0x50 : 0xe901,
        0x51 : 0xd813,
        0x52 : 0x41ae,
        0x53 : 0x1791,
        0x54 : 0xc592,
        0x55 : 0x75b4,
        0x56 : 0xf6e8,
        0x57 : 0xd9cb,
        0x58 : 0x52ef,
        0x59 : 0xb986,
        0x5a : 0x5457,
        0x5b : 0xe7c1,
        0x5c : 0x421e,
        0x5d : 0x3112,
        0x5e : 0x99bd,
        0x5f : 0x563f,
        0x60 : 0xd203,
        0x61 : 0xb026,
        0x62 : 0x835c,
        0x63 : 0x2f23,
        0x64 : 0x8b24,
        0x65 : 0xeb69,
        0x66 : 0xedd1,
        0x67 : 0xb396,
        0x68 : 0xa5df,
        0x69 : 0x730c,
        0x6a : 0xa8af,
        0x6b : 0xcf82,
        0x6c : 0x843c,
        0x6d : 0x6225,
        0x6e : 0x337a,
        0x6f : 0xac7f,
        0x70 : 0xa407,
        0x71 : 0x604d,
        0x72 : 0x06b8,
        0x73 : 0x5e47,
        0x74 : 0x1649,
        0x75 : 0xd6d3,
        0x76 : 0xdba3,
        0x77 : 0x672d,
        0x78 : 0x4bbe,
        0x79 : 0xe619,
        0x7a : 0x515f,
        0x7b : 0x9f05,
        0x7c : 0x0878,
        0x7d : 0xc44a,
        0x7e : 0x66f5,
        0x7f : 0x58ff,
        0x80 : 0x480e,
        0x81 : 0xc09a,
        0x82 : 0x0d70,
        0x83 : 0xbc8e,
        0x84 : 0x2c93,
        0x85 : 0xada7,
        0x86 : 0xb746,
        0x87 : 0xce5a,
        0x88 : 0x977d,
        0x89 : 0xcc32,
        0x8a : 0xa2bf,
        0x8b : 0x3e0a,
        0x8c : 0x10f1,
        0x8d : 0x8894,
        0x8e : 0xcdea,
        0x8f : 0xb1fe,
        0x90 : 0x901d,
        0x91 : 0x8134,
        0x92 : 0x1ae1,
        0x93 : 0x791c,
        0x94 : 0x5927,
        0x95 : 0x5b4f,
        0x96 : 0x6e8d,
        0x97 : 0x9cb5,
        0x98 : 0x2efb,
        0x99 : 0x9865,
        0x9a : 0x457e,
        0x9b : 0x7c14,
        0x9c : 0x21e3,
        0x9d : 0x1129,
        0x9e : 0x9bd5,
        0x9f : 0x63fd,
        0xa0 : 0x203b,
        0xa1 : 0x0268,
        0xa2 : 0x35c2,
        0xa3 : 0xf238,
        0xa4 : 0xb24e,
        0xa5 : 0xb69e,
        0xa6 : 0xdd1b,
        0xa7 : 0x396a,
        0xa8 : 0x5df7,
        0xa9 : 0x30ca,
        0xaa : 0x8afc,
        0xab : 0xf828,
        0xac : 0x43c6,
        0xad : 0x2253,
        0xae : 0x37aa,
        0xaf : 0xc7fa,
        0xb0 : 0x4076,
        0xb1 : 0x04d0,
        0xb2 : 0x6b85,
        0xb3 : 0xe471,
        0xb4 : 0x649d,
        0xb5 : 0x6d3d,
        0xb6 : 0xba36,
        0xb7 : 0x72d4,
        0xb8 : 0xbbee,
        0xb9 : 0x6195,
        0xba : 0x15f9,
        0xbb : 0xf050,
        0xbc : 0x878c,
        0xbd : 0x44a6,
        0xbe : 0x6f55,
        0xbf : 0x8ff4,
        0xc0 : 0x80ec,
        0xc1 : 0x09a0,
        0xc2 : 0xd70b,
        0xc3 : 0xc8e2,
        0xc4 : 0xc93a,
        0xc5 : 0xda7b,
        0xc6 : 0x746c,
        0xc7 : 0xe5a9,
        0xc8 : 0x77dc,
        0xc9 : 0xc32a,
        0xca : 0x2bf3,
        0xcb : 0xe0a1,
        0xcc : 0x0f18,
        0xcd : 0x894c,
        0xce : 0xdeab,
        0xcf : 0x1fe9,
        0xd0 : 0x01d8,
        0xd1 : 0x1341,
        0xd2 : 0xae17,
        0xd3 : 0x91c5,
        0xd4 : 0x9275,
        0xd5 : 0xb4f6,
        0xd6 : 0xe8d9,
        0xd7 : 0xcb52,
        0xd8 : 0xefb9,
        0xd9 : 0x8654,
        0xda : 0x57e7,
        0xdb : 0xc142,
        0xdc : 0x1e31,
        0xdd : 0x1299,
        0xde : 0xbd56,
        0xdf : 0x3fd2,
        0xe0 : 0x03b0,
        0xe1 : 0x2683,
        0xe2 : 0x5c2f,
        0xe3 : 0x238b,
        0xe4 : 0x24eb,
        0xe5 : 0x69ed,
        0xe6 : 0xd1b3,
        0xe7 : 0x96a5,
        0xe8 : 0xdf73,
        0xe9 : 0x0ca8,
        0xea : 0xafcf,
        0xeb : 0x8284,
        0xec : 0x3c62,
        0xed : 0x2533,
        0xee : 0x7aac,
        0xef : 0x7fa4,
        0xf0 : 0x0760,
        0xf1 : 0x4d06,
        0xf2 : 0xb85e,
        0xf3 : 0x4716,
        0xf4 : 0x49d6,
        0xf5 : 0xd3db,
        0xf6 : 0xa367,
        0xf7 : 0x2d4b,
        0xf8 : 0xbee6,
        0xf9 : 0x1951,
        0xfa : 0x5f9f,
        0xfb : 0x0508,
        0xfc : 0x78c4,
        0xfd : 0x4a66,
        0xfe : 0xf558,
    }
    if index not in random_dict.keys():
        return 0x0000
    else:
        return random_dict[index]


def asmr_validation(src_file, test_file, frame_len):
    with open(src_file, 'rb') as fi:
        src_bytes = fi.read()
        src_bytes = np.frombuffer(src_bytes, dtype=np.uint8)
        src_bytes = src_bytes.astype(np.uint16)
        src_size = src_bytes.size
    with open(test_file, 'rb') as fi:
        test_bytes = fi.read()
        test_bytes = np.frombuffer(test_bytes, dtype=np.uint32)
        test_bytes0 = test_bytes.astype(np.uint8)
        array = []
        offset = frame_len+4
        for i in range(0, test_bytes0.size, 2): 
            temp_val = (test_bytes0[i]<<8 | test_bytes0[i+1]) & 0xffff
            # if(temp_val != 0x1acf and temp_val != 0xfc1d):
            if(i%offset == 0 or i%offset == 2):
                pass
            else:
                array.append(temp_val)
        test_bytes = np.array(array, dtype=np.uint16)
        test_size = test_bytes.size
        with open("temp_test.bin", "wb") as fo:
            fo.write(test_bytes.tobytes())
        # for i in test_bytes[:20]:
            # print(f"{i:04x}")
    
    test_i = 0
    src_i  = 0
    i = 0
    for k in range(0,len(test_bytes)):
        if i == 0xff:
            i = 0
        if src_i == src_size:
            src_i = 0
        # if test_i%((frame_len+4)/2) == 0:
            # test_i += 2
        if (src_bytes[src_i] ^ randomLut(i)) & 0xffff != test_bytes[test_i] & 0xffff:
            print(f"Data integrity lost at index: {k}|{src_i}|{test_i}")
            print(f"Src Byte:- {src_bytes[src_i]:04x} and test Byte:- {test_bytes[test_i]:04x} \
                    randomization:- {randomLut(i):04x}")
            break
        i += 1
        test_i += 1
        src_i += 1
        if test_i > test_size:
            break
    
if __name__ == '__main__':
    src_file = r"D:\code_snippets\counter_data.bin"
    test_file = r"D:\code_snippets\PL_TO_PC_received_data.bin"
    frame_len = 10
    asmr_validation(src_file, test_file, frame_len)
    # for i in range(10):
        # print(f'{randomLut(i):04x}')
